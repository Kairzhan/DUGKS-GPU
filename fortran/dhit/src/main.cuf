program main
  use cudafor
  use dugks
  use dft
  use stat
  implicit none

  character(16) :: filename
  type(dim3) :: blocks, threads  
  integer :: i, j, k
  real :: start, finish
  integer :: ip
  integer :: istep
  integer :: istat

  real :: ke

  integer num, numdevices
  type(cudadeviceprop) :: prop
  istat = cudaGetDeviceCount(numdevices)
  do num = 0, numdevices-1
     istat = cudaGetDeviceProperties(prop, num)
     call printDeviceProperties(prop, num)
  end do

  print *, "Initialization:"
  call init_dft(nx, ny, nz)
  call initialize_dugks
  istat=cudaDeviceSynchronize()

  ! blocks=dim3(32, 32, 128)
  ! threads=dim3(4, 4, 1)
  ! blocks=dim3(32, 32, 256)

  ! blocks=dim3(16, 16, 128)
  ! threads=dim3(8, 8, 1)

  ! ! 128^3
  ! blocks=dim3(8, 16, 128)
  ! threads=dim3(16, 8, 1)

  ! 256^3
  blocks=dim3(16, 32, 256)
  threads=dim3(16, 8, 1)

  !  call prepare_fb<<<blocks, threads>>>(f)

  print *, "test step:"
  call cpu_time(start)  
  do istep=1, 500000
     print *, istep
     call prepare_fb<<<blocks, threads>>>(f)
     istat=cudaDeviceSynchronize()

     ! call extend<<<blocks, threads>>>
     ! istat=cudaDeviceSynchronize()
     ! deal with walls
     ! fb(:,   0,   :,   :)=2*fb(:, 1, :, :)-fb(:, 2, :, :)
     ! fb(:,nx+1,   :,   :)=2*fb(:,nx, :, :)-fb(:,nx-1, :, :)
     ! fb(:,   :,   0,   :)=2*fb(:, :, 1, :)-fb(:, :, 2, :)
     ! fb(:,   :,ny+1,   :)=2*fb(:, :,ny, :)-fb(:, :,ny-1, :)
     ! fb(:,   :,   :   ,0)=2*fb(:, :, :, 1)-fb(:, :, :, 2)
     ! fb(:,   :,   :,nz+1)=2*fb(:, :, :,nz)-fb(:, :, :,nz-1)
     ! fb(:,   0,   :,   :)=fb(:, 1, :, :)
     ! fb(:,nx+1,   :,   :)=fb(:,nx, :, :)
     ! fb(:,   :,   0,   :)=fb(:, :, 1, :)
     ! fb(:,   :,ny+1,   :)=fb(:, :,ny, :)
     ! fb(:,   :,   :   ,0)=fb(:, :, :, 1)
     ! fb(:,   :,   :,nz+1)=fb(:, :, :,nz)

     ! periodicity
     fb(:,   0,   :,   :)=fb(:, nx, :, :)
     fb(:,nx+1,   :,   :)=fb(:, 1, :, :)
     fb(:,   :,   0,   :)=fb(:, :,ny, :)
     fb(:,   :,ny+1,   :)=fb(:, :, 1, :)
     fb(:,   :,   :   ,0)=fb(:, :, :,nz)
     fb(:,   :,   :,nz+1)=fb(:, :, :, 1)

     call calc_fx<<<blocks, threads>>>(f)
     istat=cudaDeviceSynchronize()

     ! Compute KE
     if (istep==1 .or. mod(istep, 50)==0) then
        ke=0

        h_f=f
        do k=1, nz
           do j=1, ny
              do i=1, nx
                 h_rho(i,j,k)=0
                 h_ux(i,j,k)=0
                 h_uy(i,j,k)=0
                 h_uz(i,j,k)=0

                 do ip=0, npop-1
                    h_rho(i,j,k)=h_rho(i,j,k)+h_f(ip,i,j,k)
                    h_ux(i,j,k)=h_ux(i,j,k)+cix(ip)*h_f(ip, i,j,k)
                    h_uy(i,j,k)=h_uy(i,j,k)+ciy(ip)*h_f(ip, i,j,k)
                    h_uz(i,j,k)=h_uz(i,j,k)+ciz(ip)*h_f(ip, i,j,k)
                 enddo

                 h_ux(i,j,k)=h_ux(i,j,k)/h_rho(i,j,k)
                 h_uy(i,j,k)=h_uy(i,j,k)/h_rho(i,j,k)
                 h_uz(i,j,k)=h_uz(i,j,k)/h_rho(i,j,k)
              enddo
           enddo
        enddo

        ! if (mod(istep, 100)==0) then
        !    call dump_fstep(nx, ny, nz, h_ux, h_uy, h_uz, istep)
        ! endif
     
        ke=0.5*sum(h_ux**2+h_uy**2+h_uz**2)/(nx*ny*nz)
        open(100, file="KE.dat", status="unknown", position="append")
        write(100, "(I6.6,1X,F12.5,1X,1pe16.9)") istep, istep*dt, ke
        close(100)

        !        subroutine stat_te(step, dt, xwidth, visc, nx, ny, nz, ux_global, uy_global, uz_global)
        call stat_te(istep, dt, xwidth, visc, nx, ny, nz, h_ux, h_uy, h_uz)
     endif
  enddo
  istat=cudaDeviceSynchronize()
  call cpu_time(finish)
  print '("Time = ",f9.3," seconds.")',finish-start

  !  f=fb

  h_f=f
  do k=1, nz
     do j=1, ny
        do i=1, nx
           h_rho(i,j,k)=0
           h_ux(i,j,k)=0
           h_uy(i,j,k)=0
           h_uz(i,j,k)=0

           do ip=0, npop-1
              h_rho(i,j,k)=h_rho(i,j,k)+h_f(ip,i,j,k)
              h_ux(i,j,k)=h_ux(i,j,k)+cix(ip)*h_f(ip, i,j,k)
              h_uy(i,j,k)=h_uy(i,j,k)+ciy(ip)*h_f(ip, i,j,k)
              h_uz(i,j,k)=h_uz(i,j,k)+ciz(ip)*h_f(ip, i,j,k)
           enddo

           h_ux(i,j,k)=h_ux(i,j,k)/h_rho(i,j,k)
           h_uy(i,j,k)=h_uy(i,j,k)/h_rho(i,j,k)
           h_uz(i,j,k)=h_uz(i,j,k)/h_rho(i,j,k)
        enddo
     enddo
  enddo

  ! print *, "output:"
  ! write(filename, "('sim',i9.9,'.tec')") 111
  ! print *, filename
  ! open(unit=100, file=filename, status="replace")
  ! write(100, *) 'TITLE = "DUGKS RESULTS"'
  ! write(100, *) 'VARIABLES = "X", "Y", "Z", "RHO", "U", "V", "W"'
  ! write(100, "('ZONE I=',i4,1x,', J=',i4,1x,', K=',i4,1x,'F=POINT')") nx, ny, nz

  ! do k=1, nz
  !    do j=1, ny
  !       do i=1, nx
  !          write(100, "(3(f10.5,1x),4(1pe14.7,1X))") i-0.5, j-0.5, k-0.5, &
  !               !           write(100, "(3(f10.5,1x),4(f10.7,1X))") i-0.5, j-0.5, k-0.5, &
  !               h_rho(i,j,k), h_ux(i,j,k), h_uy(i,j,k), h_uz(i,j,k)
  !       enddo
  !    enddo
  ! enddo

  call free_dft
endprogram main

subroutine printDeviceProperties(prop, num)
  use cudafor
  type(cudadeviceprop) :: prop
  integer num
  ilen = verify(prop%name, ' ', .true.)
  write (*,900) "Device Number: "      ,num
  write (*,901) "Device Name: "        ,prop%name(1:ilen)
  write (*,903) "Total Global Memory: ",real(prop%totalGlobalMem)/1e9," Gbytes"
  write (*,902) "sharedMemPerBlock: "  ,prop%sharedMemPerBlock," bytes"
  write (*,900) "regsPerBlock: "       ,prop%regsPerBlock
  write (*,900) "warpSize: "           ,prop%warpSize
  write (*,900) "maxThreadsPerBlock: " ,prop%maxThreadsPerBlock
  write (*,904) "maxThreadsDim: "      ,prop%maxThreadsDim
  write (*,904) "maxGridSize: "        ,prop%maxGridSize
  write (*,903) "ClockRate: "          ,real(prop%clockRate)/1e6," GHz"
  write (*,902) "Total Const Memory: " ,prop%totalConstMem," bytes"
  write (*,905) "Compute Capability Revision: ",prop%major,prop%minor
  write (*,902) "TextureAlignment: "   ,prop%textureAlignment," bytes"
  write (*,906) "deviceOverlap: "      ,prop%deviceOverlap
  write (*,900) "multiProcessorCount: ",prop%multiProcessorCount
  write (*,906) "integrated: "         ,prop%integrated
  write (*,906) "canMapHostMemory: "   ,prop%canMapHostMemory
  write (*,906) "ECCEnabled: "         ,prop%ECCEnabled
  write (*,906) "UnifiedAddressing: "  ,prop%unifiedAddressing
  write (*,900) "L2 Cache Size: "      ,prop%l2CacheSize
  write (*,900) "maxThreadsPerSMP: "   ,prop%maxThreadsPerMultiProcessor
900 format (a,i0)
901 format (a,a)
902 format (a,i0,a)
903 format (a,f7.3,a)
904 format (a,2(i0,1x,'x',1x),i0)
905 format (a,i0,'.',i0)
906 format (a,l0)
  return
endsubroutine printDeviceProperties

! Binary dump
subroutine dump_fstep(nx, ny, nz, fx, fy, fz, istep)
  use iso_c_binding
  implicit none
  integer :: nx, ny, nz
  integer :: istep
  real(c_float), dimension(nx, ny, nz) :: fx, fy, fz
  ! integer :: i, j, k
  ! real :: dx, dy, dz
  ! real :: pi
  character(len=16) :: filename

  write(filename, "('uuu',i9.9,'.dat')") istep
  open(unit=100, file=filename, status="replace", access="stream")
  write(100) fx
  close(100)

  write(filename, "('vvv',i9.9,'.dat')") istep
  open(unit=100, file=filename, status="replace", access="stream")
  write(100) fy
  close(100)

  write(filename, "('www',i9.9,'.dat')") istep
  open(unit=100, file=filename, status="replace", access="stream")
  write(100) fz
  close(100)
endsubroutine dump_fstep
